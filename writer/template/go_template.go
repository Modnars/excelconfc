package wrtmpl

const (
	TextGoFileCommentTitle = `// Code generated by excelconfc. DO NOT EDIT.`
	TextGoDateTimeTypeDef  = `
type DateTime struct {
	time.Time
}

func (s *DateTime) UnmarshalJSON(b []byte) error {
	// 去掉引号
	str := string(b)
	str = str[1 : len(str)-1]

	// 解析时间字符串
	t, err := time.Parse(time.DateTime, str)
	if err != nil {
		return err
	}

	s.Time = t
	return nil
}

func (s DateTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.Time.Format(time.DateTime))
}
`
)

const (
	tmplGoFileCommentSourceText = `
// source:
//   file: {{.SourceFile}}
//   sheet: {{.SourceSheet}}
`
	tmplGoXXConfMapText = `
type {{.XXConfMap}} map[{{.XXConfKeyType}}]*{{.XXConf}}

func (s {{.XXConfMap}}) LoadFromJsonFile(filePath string) error {
	fileBytes, err := os.ReadFile(filePath)
	if err != nil {
		return err
	}
	jsonData := struct {
		Data []{{.XXConf}} ` + "`" + `json:"data"` + "`" + `
	}{}
	json.Unmarshal(fileBytes, &jsonData)
	for _, conf := range jsonData.Data {
		s[conf.{{.XXConfKeyField}}] = &conf
	}
	return nil
}

func (s {{.XXConfMap}}) GetVal(key {{.XXConfKeyType}}) *{{.XXConf}} {
	return s[key]
}

var instance{{.XXConfMap}} = make({{.XXConfMap}})

func Get{{.XXConfMap}}Inst() {{.XXConfMap}} {
	return instance{{.XXConfMap}}
}
`
)
