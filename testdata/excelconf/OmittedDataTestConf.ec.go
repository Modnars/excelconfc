// Code generated by excelconfc. DO NOT EDIT.
// source:
//   file: ExcelConfTest.xlsx
//   sheet: OmittedDataTestConf

package excelconf

import (
	"encoding/json"
	"encoding/xml"
	"os"
)

type ExtItemConf struct {
	Id   uint32      `json:"id,omitempty" xml:"id"`
	Type ExtTypeConf `json:"type,omitempty" xml:"type"`
	Num  uint32      `json:"num,omitempty" xml:"num"`
}

type OmittedDataTestConf struct {
	GroupId uint32        `json:"group_id,omitempty" xml:"group_id"`
	ItemId  uint32        `json:"item_id,omitempty" xml:"item_id"`
	Exts    []ExtItemConf `json:"exts,omitempty" xml:"exts>item"`
}

type OmittedDataTestConfMap map[uint32]*OmittedDataTestConf

func (s OmittedDataTestConfMap) LoadFromJsonFile(filePath string) error {
	fileBytes, err := os.ReadFile(filePath)
	if err != nil {
		return err
	}
	jsonData := struct {
		Data []*OmittedDataTestConf `json:"data"`
	}{}
	if err := json.Unmarshal(fileBytes, &jsonData); err != nil {
		return err
	}
	for _, conf := range jsonData.Data {
		s[conf.GroupId] = conf
	}
	return nil
}

func (s OmittedDataTestConfMap) LoadFromXmlFile(filePath string) error {
	fileBytes, err := os.ReadFile(filePath)
	if err != nil {
		return err
	}
	xmlData := struct {
		Data []*OmittedDataTestConf `xml:"all_infos>item"`
	}{}
	if err := xml.Unmarshal(fileBytes, &xmlData); err != nil {
		return err
	}
	for _, conf := range xmlData.Data {
		s[conf.GroupId] = conf
	}
	return nil
}

func (s OmittedDataTestConfMap) GetVal(key uint32) *OmittedDataTestConf {
	return s[key]
}

var instanceOmittedDataTestConfMap = make(OmittedDataTestConfMap)

func GetOmittedDataTestConfMapInst() OmittedDataTestConfMap {
	return instanceOmittedDataTestConfMap
}
